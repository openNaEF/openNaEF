package voss.discovery.agent.cisco.mib;

public enum CiscoStackMibPortType {
    UNDEFINED(-1, "UNDEFINED"),
    other(1, "Other"),
    cddi(2, "CDDI"),
    fddi(3, "FDDI"),
    tppmd(4),
    mlt3(5),
    sddi(6),
    smf(7),
    e10BaseT(8, "10BASE-T"),
    e10BaseF(9, "10BASE-F"),
    scf(10),
    e100BaseTX(11, "100BASE-TX"),
    e100BaseT4(12, "100BASE-T4"),
    e100BaseF(13, "100BASE-FX"),
    atmOc3mmf(14, "ATM OC3(MMF)"),
    atmOc3smf(15, "ATM OC3(SMF)"),
    atmOc3utp(16, "ATM OC3(UTP)"),
    e100BaseFsm(17, "100BASE-F(SM)"),
    e10a100BaseTX(18, "10/100BASE-TX"),
    mii(19, "MII Ethernet"),
    vlanRouter(20),
    remoteRouter(21),
    tokenring(22, "TokenRing"),
    atmOc12mmf(23, "ATM OC12(MMF)"),
    atmOc12smf(24, "ATM OC12(SMF)"),
    atmDs3(25, "ATM DS3"),
    tokenringMmf(26, "TokenRing(MMF)"),
    e1000BaseLX(27, "1000BASE-LX"),
    e1000BaseSX(28, "1000BASE-SX"),
    e1000BaseCX(29, "1000BASE-CX"),
    networkAnalysis(30),
    e1000Empty(31, "1000BASE-?(empty)"),
    e1000BaseLH(32, "1000BASE-LH"),
    e1000BaseT(33, "1000BASE-T"),
    e1000UnsupportedGbic(34, "1000BASE-?(unsupported GBIC)"),
    e1000BaseZX(35, "1000BASE-ZX"),
    depi2(36),
    t1(37, "T1"),
    e1(38, "E1"),
    fxs(39, "FXS"),
    fxo(40, "FXO"),
    transcoding(41),
    conferencing(42),
    intrusionDetect(55),
    atmOc12mm(43, "ATM OC12(MM)"),
    atmOc12smi(44, "ATM OC12(SMI)"),
    atmOc12sml(45, "ATM OC12(SML)"),
    posOc12mm(46, "POS OC12(MM)"),
    posOc12smi(47, "POS OC12(SMI)"),
    posOc12sml(48, "POS OC12(SML)"),
    posOc48sms(49, "POS OC48(SMS)"),
    posOc48smi(50, "POS OC48(SMI)"),
    posOc48sml(51, "POS OC48(SML)"),
    posOc3mm(52, "POS OC3(MM)"),
    posOc3smi(53, "POS OC3(SMI)"),
    posOc3sml(54, "POS OC3(SML)"),
    e10GBaseCPX(56, "10GBASE-CPX"),
    e10GBaseLX4(57, "10GBASE-LX4"),
    e10GBaseEX4(59, "10GBASE-EX4"),
    e10GEmpty(60, "10GBASE(empty)"),
    e10a100a1000BaseT(61, "10/100/1000BASE-T"),
    dptOc48mm(62),
    dptOc48smi(63),
    dptOc48sml(64),
    e10GBaseLR(65, "10GBASE-LR"),
    chOc12smi(66),
    chOc12mm(67),
    chOc48ss(68),
    chOc48smi(69),
    e10GBaseSX4(70, "10GBASE-SX4"),
    e10GBaseER(71, "10GBASE-ER"),
    contentEngine(72),
    ssl(73),
    firewall(74),
    vpnIpSec(75),
    ct3(76),
    e1000BaseCwdm1470(77, "1000BASE-CWDM(1470)"),
    e1000BaseCwdm1490(78, "1000BASE-CWDM(1490)"),
    e1000BaseCwdm1510(79, "1000BASE-CWDM(1510)"),
    e1000BaseCwdm1530(80, "1000BASE-CWDM(1530)"),
    e1000BaseCwdm1550(81, "1000BASE-CWDM(1550)"),
    e1000BaseCwdm1570(82, "1000BASE-CWDM(1570)"),
    e1000BaseCwdm1590(83, "1000BASE-CWDM(1590)"),
    e1000BaseCwdm1610(84, "1000BASE-CWDM(1610)"),
    e1000BaseBT(85, "1000BASE-BT"),
    e1000BaseUnapproved(86, "100BASE(Unapproved)"),
    chOc3smi(87),
    mcr(88),
    coe(89),
    mwa(90),
    psd(91),
    e100BaseLX(92, "100BASE-LX"),
    e10GBaseSR(93, "10GBASE-SR"),
    e10GBaseCX4(94, "10GBASE-CX4"),
    e10GBaseWdm1550(95, "10GBASE-WDM(1550)"),
    e10GBaseEdc1310(96, "10GBASE-EDC1310"),
    e10GBaseSW(97, "10GBASE-SW"),
    e10GBaseLW(98, "10GBASE-LW"),
    e10GBaseEW(99, "10GBASE-EW"),
    lwa(100),
    aons(101),
    sslVpn(102),
    e100BaseEmpty(103, "100BASE(empty)"),
    adsm(104),
    agsm(105),
    aces(106),
    e1000BaseUnknown(1000, "1000BASE(Unknown)"),
    e10GBaseUnknown(1001, "10GBASE(Unknown)"),
    e10GBaseUnapproved(1002, "10GBASE(Unapproved)"),
    e1000BaseWdmRxOnly(1003, "10GBASE-WDM(RxOnly)"),
    e1000BaseDwdm3033(1004, "1000BASE-DWDM(3033)"),
    e1000BaseDwdm3112(1005, "1000BASE-DWDM(3112)"),
    e1000BaseDwdm3190(1006, "1000BASE-DWDM(3190)"),
    e1000BaseDwdm3268(1007, "1000BASE-DWDM(3268)"),
    e1000BaseDwdm3425(1008, "1000BASE-DWDM(3425)"),
    e1000BaseDwdm3504(1009, "1000BASE-DWDM(3504)"),
    e1000BaseDwdm3582(1010, "1000BASE-DWDM(3582)"),
    e1000BaseDwdm3661(1011, "1000BASE-DWDM(3661)"),
    e1000BaseDwdm3819(1012, "1000BASE-DWDM(3819)"),
    e1000BaseDwdm3898(1013, "1000BASE-DWDM(3898)"),
    e1000BaseDwdm3977(1014, "1000BASE-DWDM(3977)"),
    e1000BaseDwdm4056(1015, "1000BASE-DWDM(4056)"),
    e1000BaseDwdm4214(1016, "1000BASE-DWDM(4214)"),
    e1000BaseDwdm4294(1017, "1000BASE-DWDM(4294)"),
    e1000BaseDwdm4373(1018, "1000BASE-DWDM(4373)"),
    e1000BaseDwdm4453(1019, "1000BASE-DWDM(4453)"),
    e1000BaseDwdm4612(1020, "1000BASE-DWDM(4612)"),
    e1000BaseDwdm4692(1021, "1000BASE-DWDM(4692)"),
    e1000BaseDwdm4772(1022, "1000BASE-DWDM(4772)"),
    e1000BaseDwdm4851(1023, "1000BASE-DWDM(4851)"),
    e1000BaseDwdm5012(1024, "1000BASE-DWDM(5012)"),
    e1000BaseDwdm5092(1025, "1000BASE-DWDM(5092)"),
    e1000BaseDwdm5172(1026, "1000BASE-DWDM(5172)"),
    e1000BaseDwdm5252(1027, "1000BASE-DWDM(5252)"),
    e1000BaseDwdm5413(1028, "1000BASE-DWDM(5413)"),
    e1000BaseDwdm5494(1029, "1000BASE-DWDM(5494)"),
    e1000BaseDwdm5575(1030, "1000BASE-DWDM(5575)"),
    e1000BaseDwdm5655(1031, "1000BASE-DWDM(5655)"),
    e1000BaseDwdm5817(1032, "1000BASE-DWDM(5817)"),
    e1000BaseDwdm5898(1033, "1000BASE-DWDM(5898)"),
    e1000BaseDwdm5979(1034, "1000BASE-DWDM(5979)"),
    e1000BaseDwdm6061(1035, "1000BASE-DWDM(6061)"),
    e10GBaseWdmRxOnly(1036, "10GBASE-WDM(RxOnly)"),
    e10GBaseDwdm3033(1037, "10GBASE-DWDM(3033)"),
    e10GBaseDwdm3112(1038, "10GBASE-DWDM(3112)"),
    e10GBaseDwdm3190(1039, "10GBASE-DWDM(3190)"),
    e10GBaseDwdm3268(1040, "10GBASE-DWDM(3268)"),
    e10GBaseDwdm3425(1041, "10GBASE-DWDM(3425)"),
    e10GBaseDwdm3504(1042, "10GBASE-DWDM(3504)"),
    e10GBaseDwdm3582(1043, "10GBASE-DWDM(3582)"),
    e10GBaseDwdm3661(1044, "10GBASE-DWDM(3661)"),
    e10GBaseDwdm3819(1045, "10GBASE-DWDM(3819)"),
    e10GBaseDwdm3898(1046, "10GBASE-DWDM(3898)"),
    e10GBaseDwdm3977(1047, "10GBASE-DWDM(3977)"),
    e10GBaseDwdm4056(1048, "10GBASE-DWDM(4056)"),
    e10GBaseDwdm4214(1049, "10GBASE-DWDM(4214)"),
    e10GBaseDwdm4294(1050, "10GBASE-DWDM(4294)"),
    e10GBaseDwdm4373(1051, "10GBASE-DWDM(4373)"),
    e10GBaseDwdm4453(1052, "10GBASE-DWDM(4453)"),
    e10GBaseDwdm4612(1053, "10GBASE-DWDM(4612)"),
    e10GBaseDwdm4692(1054, "10GBASE-DWDM(4692)"),
    e10GBaseDwdm4772(1055, "10GBASE-DWDM(4772)"),
    e10GBaseDwdm4851(1056, "10GBASE-DWDM(4851)"),
    e10GBaseDwdm5012(1057, "10GBASE-DWDM(5012)"),
    e10GBaseDwdm5092(1058, "10GBASE-DWDM(5092)"),
    e10GBaseDwdm5172(1059, "10GBASE-DWDM(5172)"),
    e10GBaseDwdm5252(1060, "10GBASE-DWDM(5252)"),
    e10GBaseDwdm5413(1061, "10GBASE-DWDM(5413)"),
    e10GBaseDwdm5494(1062, "10GBASE-DWDM(5494)"),
    e10GBaseDwdm5575(1063, "10GBASE-DWDM(5575)"),
    e10GBaseDwdm5655(1064, "10GBASE-DWDM(5655)"),
    e10GBaseDwdm5817(1065, "10GBASE-DWDM(5817)"),
    e10GBaseDwdm5898(1066, "10GBASE-DWDM(5898)"),
    e10GBaseDwdm5979(1067, "10GBASE-DWDM(5979)"),
    e10GBaseDwdm6061(1068, "10GBASE-DWDM(6061)"),
    e1000BaseBX10D(1069, "1000BASE-BX10D"),
    e1000BaseBX10U(1070, "1000BASE-BX10U"),
    e100BaseUnknown(1071, "100BASE(Unknown)"),
    e100BaseUnapproved(1072, "100BASE(unapproved)"),
    e100BaseSX(1073, "100BASE-SX"),
    e100BaseBX10D(1074, "100BASE-BX10D"),
    e100BaseBX10U(1075, "100BASE-BX10U"),
    e10GBaseBad(1076, "10GBASE-BAD"),
    e10GBaseZR(1077, "10GBASE-ZR"),
    e100BaseEX(1078, "100BASE-EX"),
    e100BaseZX(1079, "100BASE-ZX");

    private final int id;
    private final String value;

    private CiscoStackMibPortType(int id) {
        this.id = id;
        this.value = null;
    }

    private CiscoStackMibPortType(int id, String value) {
        this.id = id;
        this.value = value;
    }

    public int getId() {
        return this.id;
    }

    public String getValue() {
        if (value == null) {
            return this.toString();
        }
        return this.value;
    }

    public static CiscoStackMibPortType valueOf(int id) {
        for (CiscoStackMibPortType value : CiscoStackMibPortType.values()) {
            if (value.id == id) {
                return value;
            }
        }
        return UNDEFINED;
    }
}